user  nginx; # nobody;
worker_processes  1;

# 错误日志保存文件 日志级别
error_log  /var/log/nginx/error.log warn;
# nginx pid 保存文件
#pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

http {
    #include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] $request '
                      '$status $body_bytes_sent $http_referer '
                      '$http_user_agent $http_x_forwarded_for';

    access_log  /var/log/nginx/access.log  main;

    #sendfile        on;
    #tcp_nopush      on;
    #gzip            on;

    keepalive_timeout  65;

    #include /etc/nginx/conf.d/*.conf;

    # 配置全局跨域许可
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods GET,POST,OPTIONS;
    add_header Access-Control-Allow-Headers DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,NodeHost;
    if ($request_method = 'OPTIONS') {
        return 204;
    }

    # 当浏览器请求：my.test.com 的时候从下面这两个 server 中去找一个进行转发
    upstream myCluster {
        server 192.168.1.114:8080;
        server 192.168.1.114:8081;

        # 添加 weight 字段可以表示权重，值越高权重越大，默认值是 1，最大值官网没说，一般如果设置也就设置 3,5,7 这样的数
        # 官网：https://www.nginx.com/resources/admin-guide/load-balancer/#weight
        # server 192.168.1.114:8080 weight=2;
        # server 192.168.1.114:8081 weight=1;
    }

    server {
        listen       80;
        server_name  my.test.com;

        location / {
            proxy_pass   http://myCluster;
            index  index.html index.htm;
        }
    }

    # 如果访问 http 也直接跳转到 https
    server {
        listen       8080;
        server_name  h.my.test.com;
        return 301 https://$server_name$request_uri;
    }

    # 跨域设置
    server {
        server_name demo1;
        listen 8080;
        location / {
            proxy_pass http://192.168.43.10:5001;

            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
            add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
        }

        # 如果代理后面的服务已经设置了允许跨域，那么在nginx这边可以通过下面的方式取消nginx的全局跨域许可
        location /kovan/ {
            add_header 'access-control-allow-origin' '';
            proxy_pass http://127.0.0.1:8545/;
        }
    }

    # SSL代理
    server {
        listen       7070 ssl;
        server_name  demo2;

        ssl_certificate      server-cert.pem;
        ssl_certificate_key  server-key.pem;

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        location / {
            proxy_pass http://127.0.0.1:5002;
        }
    }

    # websocket代理
    server {
        listen       6060;
        server_name  demo3;

        location / {
            proxy_pass http://127.0.0.1:5003;
            proxy_socket_keepalive on;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Real-Port      $remote_port;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET,POST,OPTIONS;
            add_header Access-Control-Allow-Headers DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization;
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
    }
}
